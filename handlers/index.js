// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
const { extractVideoId, getYoutubeInfo } = require('../services/youtube');
const { saveVideoRecord } = require('../services/googleSheets');
const { OWNER_ID, MODERATOR_IDS, CHANNEL_ID } = require('../config');

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
async function handleStartCommand(bot, chatId) {
  const markup = {
    inline_keyboard: [
      [
        { text: '–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∏–¥–µ–æ', callback_data: 'video' },
        { text: '–ü–æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤—É', callback_data: 'coop' }
      ]
    ]
  };
  
  await bot.sendMessage(chatId, '–ü—Ä–∏–≤–µ—Ç! –ù–∞—Å—á–µ—Ç —á–µ–≥–æ –ø–∏—à–µ—à—å?', { reply_markup: markup });
  global.userState[chatId] = null;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /reply
async function handleReplyCommand(bot, message) {
  const userId = message.from.id;
  console.log("reply_to_cooperation called by user_id =", userId);
  
  if (userId != OWNER_ID) {
    console.log("Not the owner!");
    return;
  }
  
  const text = message.text;
  const parts = text.split(/\s+/);
  
  if (parts.length < 3) {
    await bot.sendMessage(message.chat.id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /reply <ID> <–≤–∞—à –æ—Ç–≤–µ—Ç>");
    return;
  }
  
  try {
    const coopId = parseInt(parts[1]);
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ ID –≤ –æ–¥–∏–Ω —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
    const replyText = parts.slice(2).join(' ');
    
    if (!global.cooperationRequests[coopId]) {
      await bot.sendMessage(message.chat.id, "–ó–∞–ø—Ä–æ—Å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.");
      return;
    }
    
    const userChatId = global.cooperationRequests[coopId];
    await bot.sendMessage(userChatId, replyText);
    await bot.sendMessage(message.chat.id, "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.");
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞:", error);
    await bot.sendMessage(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞.");
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /tag
async function handleTagCommand(bot, message) {
  const userId = message.from.id;
  
  if (userId != OWNER_ID && !MODERATOR_IDS.includes(userId)) {
    return;
  }
  
  const parts = message.text.split(/\s+/);
  if (parts.length < 3) {
    await bot.sendMessage(message.chat.id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /tag <ID> <—Å—Ç–∞—Ç—É—Å>");
    return;
  }
  
  const idStr = parts[1];
  const status = parts[2].toLowerCase();
  
  if (!/^\d+$/.test(idStr)) {
    await bot.sendMessage(message.chat.id, "–û—à–∏–±–∫–∞: ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.");
    return;
  }
  
  const videoId = parseInt(idStr);
  
  if (!["—Å–º–æ—Ç—Ä–µ–ª", "–Ω–µ —Å–º–æ—Ç—Ä–µ–ª", "—Å–∫–∏–ø–Ω—É–ª"].includes(status)) {
    await bot.sendMessage(message.chat.id, "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å—Ç–∞—Ç—É—Å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: —Å–º–æ—Ç—Ä–µ–ª/–Ω–µ —Å–º–æ—Ç—Ä–µ–ª/—Å–∫–∏–ø–Ω—É–ª.");
    return;
  }
  
  try {
    const { updateVideoStatus } = require('../services/googleSheets');
    const result = await updateVideoStatus(videoId, status);
    
    if (result.success) {
      await bot.sendMessage(message.chat.id, `‚úÖ –í–∏–¥–µ–æ ID ${videoId} –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ '${status}'.`);
    } else {
      await bot.sendMessage(message.chat.id, result.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏.");
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞:", error);
    await bot.sendMessage(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏.");
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /export –∏–ª–∏ /table
async function handleExportCommand(bot, message) {
  const userId = message.from.id;
  
  if (userId != OWNER_ID) {
    return;
  }
  
  const spreadsheetId = process.env.SPREADSHEET_ID;
  const sheetUrl = `https://docs.google.com/spreadsheets/d/${spreadsheetId}/edit`;
  await bot.sendMessage(message.chat.id, `–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–∞–±–ª–∏—Ü—É:\n${sheetUrl}`);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ (inline –∫–Ω–æ–ø–∫–∏)
async function handleCallbackQuery(bot, callbackQuery) {
  const chatId = callbackQuery.message.chat.id;
  const messageId = callbackQuery.message.message_id;
  const data = callbackQuery.data;
  
  try {
    if (data === 'video') {
      const markup = {
        inline_keyboard: [
          [{ text: '–ù–∞–∑–∞–¥', callback_data: 'back' }]
        ]
      };
      
      await bot.editMessageText('–û—Ç–ø—Ä–∞–≤–ª—è–π —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–æ—Å', {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: markup
      });
      
      global.userState[chatId] = 'wait_video';
    } 
    else if (data === 'coop') {
      const markup = {
        inline_keyboard: [
          [{ text: '–ù–∞–∑–∞–¥', callback_data: 'back' }]
        ]
      };
      
      await bot.editMessageText('–Ø –æ–∑–Ω–∞–∫–æ–º–ª—é—Å—å –∏ –æ—Ç–ø–∏—à—É —Ç–µ–±–µ –ª–∏–±–æ –≤ –õ–°, –ª–∏–±–æ –∑–¥–µ—Å—å', {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: markup
      });
      
      global.userState[chatId] = 'wait_coop';
    } 
    else if (data === 'back') {
      const markup = {
        inline_keyboard: [
          [
            { text: '–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∏–¥–µ–æ', callback_data: 'video' },
            { text: '–ü–æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤—É', callback_data: 'coop' }
          ]
        ]
      };
      
      await bot.editMessageText('–ü—Ä–∏–≤–µ—Ç! –ù–∞—Å—á–µ—Ç —á–µ–≥–æ –ø–∏—à–µ—à—å?', {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: markup
      });
      
      global.userState[chatId] = null;
    }
    
    // –û—Ç–≤–µ—Ç –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" —É –∫–Ω–æ–ø–∫–∏
    await bot.answerCallbackQuery(callbackQuery.id);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback-–∑–∞–ø—Ä–æ—Å–∞:", error);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async function handleVideoMessage(bot, message) {
  const chatId = message.chat.id;
  const link = message.text.trim();
  
  const allowedDomains = ["youtube.com", "youtu.be", "spotify.com", "twitch.tv"];
  if (!allowedDomains.some(domain => link.includes(domain))) {
    await bot.sendMessage(chatId, "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Å–∞–π—Ç.");
    return;
  }
  
  let videoTitle = "";
  let viewCount = "";
  let thumbnail = "";
  
  const videoId = extractVideoId(link);
  if (videoId) {
    const { title, thumb, views } = await getYoutubeInfo(videoId);
    if (title) {
      videoTitle = title;
      viewCount = views;
      thumbnail = thumb;
    }
  }
  
  const result = await saveVideoRecord(link, videoTitle, viewCount, thumbnail);
  
  if (result === "duplicate") {
    await bot.sendMessage(chatId, "‚ùó –≠—Ç–æ –≤–∏–¥–µ–æ —É–∂–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ —Ä–∞–Ω–µ–µ.");
  } else if (result === "added") {
    await bot.sendMessage(chatId, "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–µ –≤–∏–¥–µ–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ.");
  } else {
    await bot.sendMessage(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∏–¥–µ–æ.");
  }
  
  global.userState[chatId] = null;
}

async function handleCoopMessage(bot, message) {
  const chatId = message.chat.id;
  const text = message.text.trim();
  
  if (!text) {
    await bot.sendMessage(chatId, "–°–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ. –û—Ç–º–µ–Ω–∞.");
    global.userState[chatId] = null;
    return;
  }
  
  const userName = message.from.username || message.from.first_name || message.from.id.toString();
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
  const coopId = global.nextCoopId;
  global.nextCoopId += 1;
  global.cooperationRequests[coopId] = chatId;
  
  const combinedText = 
    `ü§ù –ó–∞–ø—Ä–æ—Å –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤—É –æ—Ç ${userName}:\n"${text}"\n\n` +
    `–ö–æ–¥ –∑–∞–ø—Ä–æ—Å–∞: ${coopId}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /reply ${coopId} <–≤–∞—à –æ—Ç–≤–µ—Ç> –¥–ª—è –æ—Ç–≤–µ—Ç–∞.`;
  
  try {
    await bot.sendMessage(CHANNEL_ID, combinedText);
    await bot.sendMessage(chatId, "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.");
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª:", error);
    await bot.sendMessage(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª.");
  }
  
  global.userState[chatId] = null;
}

// –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
async function handleMessage(bot, message) {
  const chatId = message.chat.id;
  const text = message.text || '';
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
  if (text.startsWith('/')) {
    const command = text.split(' ')[0].toLowerCase();
    
    if (command === '/start') {
      await handleStartCommand(bot, chatId);
      return;
    } else if (command === '/reply') {
      await handleReplyCommand(bot, message);
      return;
    } else if (command === '/tag') {
      await handleTagCommand(bot, message);
      return;
    } else if (command === '/export' || command === '/table') {
      await handleExportCommand(bot, message);
      return;
    }
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const state = global.userState[chatId];
  
  if (state === 'wait_video') {
    await handleVideoMessage(bot, message);
  } else if (state === 'wait_coop') {
    await handleCoopMessage(bot, message);
  } else {
    // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await handleStartCommand(bot, chatId);
  }
}

module.exports = {
  handleMessage,
  handleCallbackQuery
};
